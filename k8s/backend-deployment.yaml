apiVersion: apps/v1
kind: Deployment
metadata:
  name: davinci-backend
  namespace: davinci-backend
  labels:
    app: davinci-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: davinci-backend
  template:
    metadata:
      labels:
        app: davinci-backend
    spec:
      containers:
        - name: backend
          image: your-registry/davinci-backend:latest
          ports:
            - containerPort: 3000
          envFrom:
            - secretRef:
                name: davinci-secrets
            - configMapRef:
                name: davinci-config
          env:
            - name: REDIS_URL
              value: "redis://redis-service:6379"
          livenessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          resources:
            requests:
              memory: "512Mi"
              cpu: "200m"
            limits:
              memory: "1Gi"
              cpu: "500m"
      initContainers:
        - name: wait-for-redis
          image: busybox:1.35
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for Redis to be ready..."
              until nc -z redis-service 6379; do
                echo "Redis not ready, waiting..."
                sleep 2
              done
              echo "Redis is ready!"
        - name: wait-for-migration
          image: your-registry/davinci-backend:latest
          command:
            - /bin/sh
            - -c
            - |
              echo "Checking if migration completed..."
              node scripts/test-db-connection.js
              if [ $? -ne 0 ]; then
                echo "Database not ready or migration not completed"
                exit 1
              fi
              echo "Database is ready!"
          envFrom:
            - secretRef:
                name: davinci-secrets

---
apiVersion: v1
kind: Service
metadata:
  name: davinci-backend-service
  namespace: davinci-backend
  labels:
    app: davinci-backend
spec:
  selector:
    app: davinci-backend
  ports:
    - port: 80
      targetPort: 3000
      protocol: TCP
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: davinci-backend-ingress
  namespace: davinci-backend
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
    - hosts:
        - api.yourdomain.com
      secretName: davinci-backend-tls
  rules:
    - host: api.yourdomain.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: davinci-backend-service
                port:
                  number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: davinci-backend-hpa
  namespace: davinci-backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: davinci-backend
  minReplicas: 3
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
