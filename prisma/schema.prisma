// Prisma schema will be defined here as data models are provided.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CulturalPieceType {
  MONUMENT
  PAINTING
  SCULPTURE
}

enum TicketType {
  POPULAR
  MUSEUM
  MONUMENT
  CITY
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum Language {
  en
  es
  ca
  pt
  fr
  de
  it
}

enum Role {
  USER
  SUPERADMIN
}

model User {
  id                      String   @id @default(uuid())
  firebaseUid             String   @unique
  ambientMusic            Boolean  @default(true)
  communicationEnabled    Boolean  @default(true)
  deviceModel             String?
  deviceType              String?
  name                    String?
  email                   String?
  gender                  Gender?
  ipAddress               String?
  isPrivacyPolicyEnabled  Boolean  @default(false)
  language                Language @default(en)
  role                    Role     @default(USER)
  yearOfBirth             String?
  notificationCount       Int      @default(0)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@index([firebaseUid])
  @@index([email])
  @@index([role])
  @@index([language])
}

model CulturalExhibit {
  id               String   @id @default(uuid())
  name             Json
  description      Json
  ai               Json
  importantNotice  Json
  city             String
  comingSoon       Boolean
  closingTime      DateTime
  disableGroup     Boolean
  geoCoordinates   Json
  gpsAvailable     Boolean
  images           String[]
  openingTime      DateTime
  priority         Int
  textOnly         Boolean
  skipMap          Boolean
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  levels           Level[]
  exhibitSpaces    ExhibitSpace[]
  culturalPieces   CulturalPiece[]
  exhibitItineraries ExhibitItinerary[]
  tickets          Ticket[]
}

model Level {
  id                 String          @id @default(uuid())
  culturalExhibitId  String
  name               Json
  description        Json
  mainImage          String
  mapImage           String
  order              Int
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relations
  culturalExhibit    CulturalExhibit @relation(fields: [culturalExhibitId], references: [id], onDelete: Cascade)
  exhibitSpaces      ExhibitSpace[]
  culturalPieces     CulturalPiece[]

  @@index([culturalExhibitId])
  @@index([order])
}

model ExhibitSpace {
  id                 String          @id @default(uuid())
  name               String
  description        String
  culturalExhibitId  String
  levelId            String
  image              String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  // Relations
  culturalExhibit    CulturalExhibit @relation(fields: [culturalExhibitId], references: [id], onDelete: Cascade)
  level              Level           @relation(fields: [levelId], references: [id], onDelete: Cascade)
  culturalPieces     CulturalPiece[]

  @@index([culturalExhibitId])
  @@index([levelId])
}

model CulturalPiece {
  id                      String              @id @default(uuid())
  name                    Json
  shortDescription        Json
  aiDescription           Json
  initialGreetingText     Json
  greetingAudioAvailable  Boolean
  isActive                Boolean
  type                    CulturalPieceType
  coordinates             Json?
  images                  String[]
  marker                  Json?
  video                   String?
  culturalExhibitId       String
  levelId                 String
  exhibitSpaceId          String
  initialGreetingAudios   Json
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  // Relations
  culturalExhibit         CulturalExhibit     @relation(fields: [culturalExhibitId], references: [id], onDelete: Cascade)
  level                   Level               @relation(fields: [levelId], references: [id], onDelete: Cascade)
  exhibitSpace            ExhibitSpace        @relation(fields: [exhibitSpaceId], references: [id], onDelete: Cascade)

  @@index([culturalExhibitId])
  @@index([levelId])
  @@index([exhibitSpaceId])
  @@index([type])
  @@index([isActive])
}

model ExhibitItinerary {
  id                      String              @id @default(uuid())
  name                    Json
  description             Json
  minDuration             Int
  maxDuration             Int
  isActive                Boolean
  isCustom                Boolean
  isPreferred             Boolean
  likes                   Int                 @default(0)
  images                  String[]
  rank                    Int
  culturalPiecesRanking   Json
  culturalExhibitId       String
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  // Relations
  culturalExhibit         CulturalExhibit     @relation(fields: [culturalExhibitId], references: [id], onDelete: Cascade)
  tickets                 Ticket[]            @relation("TicketItineraries")

  @@index([culturalExhibitId])
  @@index([isActive])
  @@index([isCustom])
  @@index([isPreferred])
  @@index([rank])
}

model Ticket {
  id                      String              @id @default(uuid())
  name                    Json
  description             Json
  city                    String
  comingSoon              Boolean
  isRecommended           Boolean
  images                  String[]
  maxTime                 Int
  price                   Float
  priority                Int
  onOffer                 Boolean
  offerPrice              Float?
  recommendedVisitTime    String
  type                    TicketType
  culturalExhibitId       String
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt

  // Relations
  culturalExhibit         CulturalExhibit     @relation(fields: [culturalExhibitId], references: [id], onDelete: Cascade)
  exhibitItineraries      ExhibitItinerary[]  @relation("TicketItineraries")

  @@index([culturalExhibitId])
  @@index([type])
  @@index([isRecommended])
  @@index([comingSoon])
  @@index([onOffer])
  @@index([priority])
}
